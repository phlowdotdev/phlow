name: Tag, Build, Release, GHCR & Docker Hub

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          version=$(grep '^version' Cargo.toml | head -n1 | sed -E 's/version = "(.*)"/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "v$VERSION"
          git push origin "v$VERSION"

  build:
    name: Compile Binary
    runs-on: ubuntu-latest
    needs: tag
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    outputs:
      version: ${{ needs.tag.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install OpenSSL for GNU
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Set OpenSSL environment for MUSL
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=0" >> $GITHUB_ENV
          echo "OPENSSL_DIR=" >> $GITHUB_ENV

      - name: Build for ${{ matrix.target }}
        run: |
          features=""
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            features="--features vendored"
          fi
          cargo build --release --target ${{ matrix.target }} -p phlow-runtime $features

      - name: Rename binary
        run: mv ./target/${{ matrix.target }}/release/phlow ./phlow-${{ matrix.target }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: phlow-${{ matrix.target }}
          path: ./phlow-${{ matrix.target }}
        

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download musl binary
        uses: actions/download-artifact@v4
        with:
          name: phlow-x86_64-unknown-linux-musl
          path: .

      - name: Download gnu binary
        uses: actions/download-artifact@v4
        with:
          name: phlow-x86_64-unknown-linux-gnu
          path: .

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          files: |
            ./phlow-x86_64-unknown-linux-gnu
            ./phlow-x86_64-unknown-linux-musl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-ghcr:
    name: Push to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download musl binary
        uses: actions/download-artifact@v4
        with:
          name: phlow-x86_64-unknown-linux-musl
          path: .

      - name: Download gnu binary
        uses: actions/download-artifact@v4
        with:
          name: phlow-x86_64-unknown-linux-gnu
          path: .

      - name: Rename binaries
        run: |
          mv phlow-* . && ls -lh

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker images to GHCR
        run: |
          docker build -f ./docker/Dockerfile.multi --target phlow-slim \
            -t ghcr.io/${{ github.repository_owner }}/phlow:slim \
            -t ghcr.io/${{ github.repository_owner }}/phlow:latest .

          docker build -f ./docker/Dockerfile.multi --target phlow-static \
            -t ghcr.io/${{ github.repository_owner }}/phlow:static .

          docker push ghcr.io/${{ github.repository_owner }}/phlow:slim
          docker push ghcr.io/${{ github.repository_owner }}/phlow:latest
          docker push ghcr.io/${{ github.repository_owner }}/phlow:static



  docker-hub:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download musl binary
        uses: actions/download-artifact@v4
        with:
          name: phlow-x86_64-unknown-linux-musl
          path: .

      - name: Download gnu binary
        uses: actions/download-artifact@v4
        with:
          name: phlow-x86_64-unknown-linux-gnu
          path: .

      - name: Rename binaries
        run: mv phlow-* .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u lowcarboncode --password-stdin

      - name: Build and Push Docker images to Docker Hub
        run: |
          docker build -f ./docker/Dockerfile.multi --target phlow-slim \
            -t lowcarboncode/phlow:slim \
            -t lowcarboncode/phlow:latest .

          docker build -f ./docker/Dockerfile.multi --target phlow-static \
            -t lowcarboncode/phlow:static .

          docker push lowcarboncode/phlow:slim
          docker push lowcarboncode/phlow:latest
          docker push lowcarboncode/phlow:static


