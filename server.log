[2025-08-12T19:17:12Z DEBUG phlow] Starting Phlow Runtime
[2025-08-12T19:17:12Z INFO  phlow::loader] Downloading modules...
[2025-08-12T19:17:12Z INFO  phlow::loader] Module http_server (latest) already exists at phlow_packages/http_server/module.so, skipping download
[2025-08-12T19:17:12Z INFO  phlow::loader] Module cache (latest) already exists at phlow_packages/cache/module.so, skipping download
[2025-08-12T19:17:12Z INFO  phlow::loader] All modules downloaded and extracted successfully
[2025-08-12T19:17:12Z DEBUG phlow::loader] update_info
[2025-08-12T19:17:12Z DEBUG phlow::loader] module info loaded
[2025-08-12T19:17:12Z DEBUG phlow::loader] module info loaded
[2025-08-12T19:17:12Z DEBUG phlow] Run application
[2025-08-12T19:17:12Z DEBUG phlow::runtime] Module http_server loaded with name "http_server" and version "latest"
[2025-08-12T19:17:12Z DEBUG phlow::loader] Find phlow_packages/http_server/module.so...
[2025-08-12T19:17:12Z INFO  phlow::loader] ðŸ§ª Load Module: http_server (latest), in phlow_packages/http_server/module.so
[2025-08-12T19:17:12Z INFO  phlow::loader] Loading binary module: phlow_packages/http_server/module.so
[2m2025-08-12T19:17:12.660124Z[0m [34mDEBUG[0m [2mphlow_sdk::otel[0m[2m:[0m PHLOW_OTEL is set to false, using default subscriber
[2m2025-08-12T19:17:12.664321Z[0m [34mDEBUG[0m [2mlog[0m[2m:[0m Loading OpenAPI spec from content: {"components": {"schemas": {"UserId": {"type": "string","description": "The unique identifier of a user","format": "uuid"},"Error": {"additionalProperties": false,"type": "object","properties": {"details": {"type": "array","items": {"type": "object"},"description": "Arbitrary validation or domain details"},"message": {"type": "string"},"code": {"type": "string"}},"required": ["code","message"]},"User": {"required": ["id","name","email"],"properties": {"email": {"pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$","format": "email","type": "string"},"age": {"description": "User age in years (optional)","maximum": 120,"minimum": 0,"type": "integer"},"name": {"pattern": "^[a-zA-ZÃ€-Ã¿\s]+$","type": "string","maxLength": 50,"minLength": 2},"id": {"$ref": "#/components/schemas/UserId"},"phone": {"description": "User phone number (optional)","pattern": "^\+?[1-9]\d{1,14}$","type": "string"}},"additionalProperties": false,"description": "User resource","type": "object"},"UpdateUser": {"additionalProperties": true,"description": "Payload to update an existing user","properties": {"age": {"type": "integer","minimum": 0,"maximum": 120},"name": {"type": "string","pattern": "^[a-zA-ZÃ€-Ã¿\s]+$","minLength": 2,"maxLength": 50},"phone": {"type": "string","pattern": "^\+?[1-9]\d{1,14}$"}},"minProperties": 1,"type": "object"},"NewUser": {"type": "object","description": "Payload to create a new user","properties": {"email": {"type": "string","format": "email","pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"},"phone": {"pattern": "^\+?[1-9]\d{1,14}$","type": "string"},"name": {"minLength": 2,"maxLength": 50,"pattern": "^[a-zA-ZÃ€-Ã¿\s]+$","type": "string"},"age": {"type": "integer","minimum": 0,"maximum": 120}},"required": ["name","email"],"additionalProperties": false}},"responses": {"NotFound": {"description": "Resource not found","content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}},"ValidationError": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}},"description": "Validation error"}},"parameters": {"UserIdPath": {"name": "userId","in": "path","required": true,"schema": {"$ref": "#/components/schemas/UserId"}}}},"servers": [{"url": "https://api.example.com/v1"}],"info": {"version": "1.0.0","title": "Test API"},"openapi": "3.1.0","paths": {"/users/{userId}": {"parameters": [{"$ref": "#/components/parameters/UserIdPath"}],"put": {"operationId": "updateUser","tags": ["Users"],"summary": "Update user by ID","requestBody": {"required": true,"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUser"}}}},"responses": {"404": {"$ref": "#/components/responses/NotFound"},"400": {"$ref": "#/components/responses/ValidationError"},"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}},"description": "User updated"}}},"delete": {"summary": "Delete user by ID","tags": ["Users"],"responses": {"204": {"description": "User deleted"},"404": {"$ref": "#/components/responses/NotFound"}},"operationId": "deleteUser"},"get": {"responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}},"description": "User found"},"404": {"$ref": "#/components/responses/NotFound"}},"summary": "Get user by ID","tags": ["Users"],"operationId": "getUser"}},"/users": {"post": {"summary": "Create a new user","tags": ["Users"],"requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NewUser"}}},"required": true},"operationId": "createUser","responses": {"201": {"headers": {"Location": {"schema": {"type": "string","format": "uri"},"description": "URI of the created resource"}},"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}},"description": "User created"},"400": {"$ref": "#/components/responses/ValidationError"}}},"get": {"operationId": "listUsers","summary": "List all users","responses": {"400": {"$ref": "#/components/responses/ValidationError"},"200": {"description": "A list of users","content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/User"},"type": "array"}}}}},"tags": ["Users"]}}},"tags": [{"description": "User management endpoints","name": "Users"}]}    
[2m2025-08-12T19:17:12.665641Z[0m [32m INFO[0m [2mlog[0m[2m:[0m OpenAPI validator loaded successfully    
[2m2025-08-12T19:17:12.665704Z[0m [34mDEBUG[0m [2mlog[0m[2m:[0m Listening on 0.0.0.0:3000    
[2025-08-12T19:17:12Z DEBUG phlow::runtime] Module http_server did not register
[2025-08-12T19:17:12Z DEBUG phlow::runtime] Module cache loaded with name "cache" and version "latest"
[2025-08-12T19:17:12Z DEBUG phlow::loader] Find phlow_packages/cache/module.so...
[2025-08-12T19:17:12Z INFO  phlow::loader] ðŸ§ª Load Module: cache (latest), in phlow_packages/cache/module.so
[2025-08-12T19:17:12Z INFO  phlow::loader] Loading binary module: phlow_packages/cache/module.so
[2025-08-12T19:17:12Z DEBUG cache] Cache module started with config: CacheConfig { capacity: 1000, default_ttl: None, enable_events: false }
[2025-08-12T19:17:12Z DEBUG phlow::runtime] Module cache registered
[2025-08-12T19:17:12Z INFO  phlow::runtime] Phlow!
[2025-08-12T19:17:12Z DEBUG phlow_engine::transform] [
    	[
    		{
    			"return": {
    				"status_code": 409,
    				"body": {
    					"message": "User already exists"
    				}
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"action": "get",
    				"key": "{{ main.body.email }}"
    			}
    		},
    		{
    			"assert": "{{ payload.success && payload.found }}",
    			"then": 0
    		},
    		{
    			"input": {
    				"action": "set",
    				"value": "{{ main.body }}",
    				"key": "{{ main.body.email }}"
    			},
    			"use": "cache"
    		},
    		{
    			"return": {
    				"status_code": 201,
    				"body": {
    					"message": "User created successfully",
    					"user": "{{ main.body }}"
    				}
    			}
    		}
    	],
    	[
    		{
    			"return": {
    				"status_code": 200,
    				"body": "{{ main }}"
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"action": "get",
    				"key": "{{ main.path_params.userId }}"
    			},
    			"use": "cache"
    		},
    		{
    			"assert": "{{ payload.success }}",
    			"then": 2
    		},
    		{
    			"return": {
    				"status_code": 404,
    				"body": {
    					"message": "User not found"
    				}
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"value": "{{ merge(payload.value, main.body) }}",
    				"key": "{{ main.path_params.userId }}",
    				"action": "set"
    			}
    		},
    		{
    			"return": {
    				"status_code": 200,
    				"body": {
    					"message": "User updated successfully",
    					"user": "{{ main.body }}"
    				}
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"action": "get",
    				"value": "{{ main.body }}",
    				"key": "{{ main.path_params.userId }}"
    			}
    		},
    		{
    			"assert": "{{ payload.success && !is_empty(payload.value) }}",
    			"then": 4
    		},
    		{
    			"return": {
    				"status_code": 404,
    				"body": {
    					"message": "User not found"
    				}
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"action": "remove",
    				"key": "{{ main.path_params.userId }}"
    			}
    		},
    		{
    			"return": {
    				"body": {
    				},
    				"status_code": 204
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"action": "list"
    			}
    		},
    		{
    			"return": {
    				"body": {
    					"users": "{{ payload.items }}"
    				},
    				"status_code": 200
    			}
    		}
    	],
    	[
    		{
    			"then": 1,
    			"assert": "{{ main.method == \"POST\" && main.path == \"/users\" }}"
    		},
    		{
    			"assert": "{{ main.method == \"GET\" && main.path == \"/users/{userId}\" }}",
    			"then": 3
    		},
    		{
    			"then": 5,
    			"assert": "{{ main.method == \"PUT\" && main.path == \"/users/{userId}\" }}"
    		},
    		{
    			"assert": "{{ main.method == \"DELETE\" && main.path == \"/users/{userId}\" }}",
    			"then": 6
    		},
    		{
    			"assert": "{{ main.method == \"GET\" && main.path == \"/users\" }}",
    			"then": 7
    		}
    	]
    ]
[2025-08-12T19:18:07Z DEBUG phlow::memory] Memory released successfully: 1
