[2025-08-12T19:23:53Z DEBUG phlow] Starting Phlow Runtime
[2025-08-12T19:23:53Z INFO  phlow::loader] Downloading modules...
[2025-08-12T19:23:53Z INFO  phlow::loader] Module http_server (latest) already exists at phlow_packages/http_server/module.so, skipping download
[2025-08-12T19:23:53Z INFO  phlow::loader] Module cache (latest) already exists at phlow_packages/cache/module.so, skipping download
[2025-08-12T19:23:53Z INFO  phlow::loader] All modules downloaded and extracted successfully
[2025-08-12T19:23:53Z DEBUG phlow::loader] update_info
[2025-08-12T19:23:53Z DEBUG phlow::loader] module info loaded
[2025-08-12T19:23:53Z DEBUG phlow::loader] module info loaded
[2025-08-12T19:23:53Z DEBUG phlow] Run application
[2025-08-12T19:23:53Z DEBUG phlow::runtime] Module http_server loaded with name "http_server" and version "latest"
[2025-08-12T19:23:53Z DEBUG phlow::loader] Find phlow_packages/http_server/module.so...
[2025-08-12T19:23:53Z INFO  phlow::loader] ðŸ§ª Load Module: http_server (latest), in phlow_packages/http_server/module.so
[2025-08-12T19:23:53Z INFO  phlow::loader] Loading binary module: phlow_packages/http_server/module.so
[2m2025-08-12T19:23:53.205199Z[0m [34mDEBUG[0m [2mphlow_sdk::otel[0m[2m:[0m PHLOW_OTEL is set to false, using default subscriber
[2m2025-08-12T19:23:53.209314Z[0m [34mDEBUG[0m [2mlog[0m[2m:[0m Loading OpenAPI spec from content: {"openapi": "3.1.0","info": {"version": "1.0.0","title": "Test API"},"servers": [{"url": "https://api.example.com/v1"}],"tags": [{"name": "Users","description": "User management endpoints"}],"components": {"schemas": {"NewUser": {"additionalProperties": false,"properties": {"name": {"minLength": 2,"maxLength": 50,"pattern": "^[a-zA-ZÃ€-Ã¿\s]+$","type": "string"},"phone": {"pattern": "^\+?[1-9]\d{1,14}$","type": "string"},"age": {"type": "integer","maximum": 120,"minimum": 0},"email": {"format": "email","type": "string"}},"type": "object","description": "Payload to create a new user","required": ["name","email"]},"UserId": {"type": "string","description": "The unique identifier of a user","format": "uuid"},"Error": {"type": "object","required": ["code","message"],"properties": {"code": {"type": "string"},"details": {"description": "Arbitrary validation or domain details","items": {"type": "object"},"type": "array"},"message": {"type": "string"}},"additionalProperties": false},"User": {"properties": {"id": {"$ref": "#/components/schemas/UserId"},"name": {"type": "string","maxLength": 50,"minLength": 2,"pattern": "^[a-zA-ZÃ€-Ã¿\s]+$"},"phone": {"description": "User phone number (optional)","pattern": "^\+?[1-9]\d{1,14}$","type": "string"},"email": {"format": "email","type": "string"},"age": {"maximum": 120,"type": "integer","minimum": 0,"description": "User age in years (optional)"}},"required": ["id","name","email"],"description": "User resource","type": "object","additionalProperties": false},"UpdateUser": {"minProperties": 1,"type": "object","properties": {"name": {"pattern": "^[a-zA-ZÃ€-Ã¿\s]+$","minLength": 2,"type": "string","maxLength": 50},"phone": {"type": "string","pattern": "^\+?[1-9]\d{1,14}$"},"age": {"maximum": 120,"minimum": 0,"type": "integer"}},"description": "Payload to update an existing user","additionalProperties": true}},"parameters": {"UserIdPath": {"name": "userId","in": "path","schema": {"$ref": "#/components/schemas/UserId"},"required": true}},"responses": {"NotFound": {"description": "Resource not found","content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}},"ValidationError": {"description": "Validation error","content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}}}}},"paths": {"/users/{userId}": {"put": {"responses": {"400": {"$ref": "#/components/responses/ValidationError"},"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}},"description": "User updated"},"404": {"$ref": "#/components/responses/NotFound"}},"summary": "Update user by ID","requestBody": {"required": true,"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUser"}}}},"tags": ["Users"],"operationId": "updateUser"},"parameters": [{"$ref": "#/components/parameters/UserIdPath"}],"delete": {"responses": {"204": {"description": "User deleted"},"404": {"$ref": "#/components/responses/NotFound"}},"summary": "Delete user by ID","tags": ["Users"],"operationId": "deleteUser"},"get": {"tags": ["Users"],"operationId": "getUser","responses": {"404": {"$ref": "#/components/responses/NotFound"},"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}},"description": "User found"}},"summary": "Get user by ID"}},"/users": {"post": {"tags": ["Users"],"operationId": "createUser","responses": {"201": {"description": "User created","headers": {"Location": {"description": "URI of the created resource","schema": {"type": "string","format": "uri"}}},"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}},"400": {"$ref": "#/components/responses/ValidationError"}},"summary": "Create a new user","requestBody": {"required": true,"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NewUser"}}}}},"get": {"tags": ["Users"],"operationId": "listUsers","responses": {"400": {"$ref": "#/components/responses/ValidationError"},"200": {"content": {"application/json": {"schema": {"type": "array","items": {"$ref": "#/components/schemas/User"}}}},"description": "A list of users"}},"summary": "List all users"}}}}    
[2m2025-08-12T19:23:53.210792Z[0m [32m INFO[0m [2mlog[0m[2m:[0m OpenAPI validator loaded successfully    
[2m2025-08-12T19:23:53.210845Z[0m [34mDEBUG[0m [2mlog[0m[2m:[0m Listening on 0.0.0.0:3000    
[2025-08-12T19:23:53Z DEBUG phlow::runtime] Module http_server did not register
[2025-08-12T19:23:53Z DEBUG phlow::runtime] Module cache loaded with name "cache" and version "latest"
[2025-08-12T19:23:53Z DEBUG phlow::loader] Find phlow_packages/cache/module.so...
[2025-08-12T19:23:53Z INFO  phlow::loader] ðŸ§ª Load Module: cache (latest), in phlow_packages/cache/module.so
[2025-08-12T19:23:53Z INFO  phlow::loader] Loading binary module: phlow_packages/cache/module.so
[2025-08-12T19:23:53Z DEBUG phlow::runtime] Module cache registered
[2025-08-12T19:23:53Z DEBUG cache] Cache module started with config: CacheConfig { capacity: 1000, default_ttl: None, enable_events: false }
[2025-08-12T19:23:53Z INFO  phlow::runtime] Phlow!
[2025-08-12T19:23:53Z DEBUG phlow_engine::transform] [
    	[
    		{
    			"return": {
    				"status_code": 409,
    				"body": {
    					"message": "User already exists"
    				}
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"key": "{{ main.body.email }}",
    				"action": "get"
    			},
    			"use": "cache"
    		},
    		{
    			"then": 0,
    			"assert": "{{ payload.success && payload.found }}"
    		},
    		{
    			"use": "cache",
    			"input": {
    				"key": "{{ main.body.email }}",
    				"value": "{{ main.body }}",
    				"action": "set"
    			}
    		},
    		{
    			"return": {
    				"status_code": 201,
    				"body": {
    					"user": "{{ main.body }}",
    					"message": "User created successfully"
    				}
    			}
    		}
    	],
    	[
    		{
    			"return": {
    				"body": "{{ main }}",
    				"status_code": 200
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"key": "{{ main.path_params.userId }}",
    				"action": "get"
    			}
    		},
    		{
    			"assert": "{{ payload.success }}",
    			"then": 2
    		},
    		{
    			"return": {
    				"body": {
    					"message": "User not found"
    				},
    				"status_code": 404
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"key": "{{ main.path_params.userId }}",
    				"value": "{{ merge(payload.value, main.body) }}",
    				"action": "set"
    			},
    			"use": "cache"
    		},
    		{
    			"return": {
    				"body": {
    					"message": "User updated successfully",
    					"user": "{{ main.body }}"
    				},
    				"status_code": 200
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"key": "{{ main.path_params.userId }}",
    				"action": "get",
    				"value": "{{ main.body }}"
    			},
    			"use": "cache"
    		},
    		{
    			"assert": "{{ payload.success && !is_empty(payload.value) }}",
    			"then": 4
    		},
    		{
    			"return": {
    				"body": {
    					"message": "User not found"
    				},
    				"status_code": 404
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"key": "{{ main.path_params.userId }}",
    				"action": "remove"
    			}
    		},
    		{
    			"return": {
    				"status_code": 204,
    				"body": {
    				}
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"action": "list"
    			}
    		},
    		{
    			"return": {
    				"status_code": 200,
    				"body": {
    					"users": "{{ payload.items }}"
    				}
    			}
    		}
    	],
    	[
    		{
    			"then": 1,
    			"assert": "{{ main.method == \"POST\" && main.path == \"/users\" }}"
    		},
    		{
    			"then": 3,
    			"assert": "{{ main.method == \"GET\" && main.path == \"/users/{userId}\" }}"
    		},
    		{
    			"then": 5,
    			"assert": "{{ main.method == \"PUT\" && main.path == \"/users/{userId}\" }}"
    		},
    		{
    			"assert": "{{ main.method == \"DELETE\" && main.path == \"/users/{userId}\" }}",
    			"then": 6
    		},
    		{
    			"assert": "{{ main.method == \"GET\" && main.path == \"/users\" }}",
    			"then": 7
    		}
    	]
    ]
[2025-08-12T19:24:07Z DEBUG cache] Cache module received input: Get { key: "test@example.com" }
[2025-08-12T19:24:07Z DEBUG cache] Cache miss for key 'test@example.com'
[2025-08-12T19:24:07Z DEBUG cache] Cache operation successful
[2025-08-12T19:24:07Z DEBUG cache] Cache module received input: Set { key: "test@example.com", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "John" }), String(StringB { value: "email" }): String(StringB { value: "test@example.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(30), i128: None, f32: None, f64: None })})), ttl: None }
[2025-08-12T19:24:07Z DEBUG cache] Set key 'test@example.com' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "John" }), String(StringB { value: "email" }): String(StringB { value: "test@example.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(30), i128: None, f32: None, f64: None })}))
[2025-08-12T19:24:07Z DEBUG cache] Cache operation successful
[2025-08-12T19:24:48Z DEBUG phlow::memory] Memory released successfully: 1
[2025-08-12T19:24:49Z DEBUG cache] Cache module received input: Get { key: "anna@company.co.uk" }
[2025-08-12T19:24:49Z DEBUG cache] Cache miss for key 'anna@company.co.uk'
[2025-08-12T19:24:49Z DEBUG cache] Cache operation successful
[2025-08-12T19:24:49Z DEBUG cache] Cache module received input: Set { key: "anna@company.co.uk", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Anna" }), String(StringB { value: "email" }): String(StringB { value: "anna@company.co.uk" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(28), i128: None, f32: None, f64: None })})), ttl: None }
[2025-08-12T19:24:49Z DEBUG cache] Set key 'anna@company.co.uk' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Anna" }), String(StringB { value: "email" }): String(StringB { value: "anna@company.co.uk" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(28), i128: None, f32: None, f64: None })}))
[2025-08-12T19:24:49Z DEBUG cache] Cache operation successful
