name: auth-api
version: 1.0.0
description: API de autentica√ß√£o com JWT
main: web_server

modules:
  - name: web_server
    module: http_server
    version: latest
    with:
      host: "0.0.0.0"
      port: 3000

  - name: jwt_handler
    module: jwt
    version: 0.0.1
    with:
      secret: "minha-chave-super-secreta-jwt-2024"
      expires_in: 3600  # 1 hora

  - name: logger
    module: log
    version: latest

steps:
  - name: route_request
    condition:
      left: "{{ $input.path }}"
      operator: equals
      right: "/login"
    then:
      condition:
        left: "{{ $input.method }}"
        operator: equals
        right: "POST"
      then:
        # Endpoint de login
        name: handle_login
        use: logger
        input:
          level: info
          message: "üîê Login attempt for: {{ $input.body.email }}"
      else:
        # M√©todo n√£o permitido para /login
        return:
          status_code: 405
          headers:
            Content-Type: "application/json"
          body:
            error: "Method not allowed"
            message: "Use POST for login"
    else:
      condition:
        left: "{{ $input.path }}"
        operator: equals
        right: "/protected"
      then:
        # Endpoint protegido que requer JWT
        name: verify_auth
        script: |
          let authHeader = $input.headers.authorization;
          if (!authHeader) {
            {
              status_code: 401,
              body: { error: "Authorization header missing" }
            }
          } else if (!authHeader.startsWith("Bearer ")) {
            {
              status_code: 401, 
              body: { error: "Invalid authorization format" }
            }
          } else {
            { token: authHeader.replace("Bearer ", "") }
          }
      else:
        # Rota n√£o encontrada
        return:
          status_code: 404
          headers:
            Content-Type: "application/json"
          body:
            error: "Not found"
            message: "Route not found"

  - name: process_login
    condition:
      left: "{{ $handle_login }}"
      operator: exists
      right: true
    then:
      # Simular valida√ß√£o de credenciais
      condition:
        left: "{{ $input.body.email }}"
        operator: equals
        right: "admin@example.com"
      then:
        condition:
          left: "{{ $input.body.password }}"
          operator: equals
          right: "123456"
        then:
          # Credenciais v√°lidas - criar JWT
          use: jwt_handler
          input:
            action: create
            data:
              user_id: 1
              email: "admin@example.com"
              name: "Administrador"
              roles: ["admin", "user"]
              permissions: ["read", "write", "delete"]
        else:
          # Senha incorreta
          return:
            status_code: 401
            headers:
              Content-Type: "application/json"
            body:
              error: "Invalid credentials"
              message: "Incorrect password"
      else:
        # Email n√£o encontrado
        return:
          status_code: 401
          headers:
            Content-Type: "application/json"
          body:
            error: "Invalid credentials"
            message: "User not found"

  - name: return_login_success
    condition:
      left: "{{ $process_login.token }}"
      operator: exists
      right: true
    then:
      use: logger
      input:
        level: info
        message: "‚úÖ Login successful for admin@example.com"
    
  - name: login_response
    condition:
      left: "{{ $process_login.token }}"
      operator: exists
      right: true
    then:
      return:
        status_code: 200
        headers:
          Content-Type: "application/json"
        body:
          success: true
          message: "Login successful"
          token: "{{ $process_login.token }}"
          expires_at: "{{ $process_login.expires_at }}"
          user:
            email: "admin@example.com"
            name: "Administrador"
            roles: ["admin", "user"]

  - name: verify_jwt_token
    condition:
      left: "{{ $verify_auth.token }}"
      operator: exists
      right: true
    then:
      use: jwt_handler
      input:
        action: verify
        token: "{{ $verify_auth.token }}"

  - name: handle_jwt_verification
    condition:
      left: "{{ $verify_jwt_token.valid }}"
      operator: equals
      right: true
    then:
      # Token v√°lido - retornar dados protegidos
      use: logger
      input:
        level: info
        message: "‚úÖ Authorized access to protected resource by {{ $verify_jwt_token.data.email }}"
    else:
      condition:
        left: "{{ $verify_jwt_token.expired }}"
        operator: equals
        right: true
      then:
        # Token expirado
        return:
          status_code: 401
          headers:
            Content-Type: "application/json"
          body:
            error: "Token expired"
            message: "Please login again"
      else:
        # Token inv√°lido
        return:
          status_code: 401
          headers:
            Content-Type: "application/json"
          body:
            error: "Invalid token"
            message: "{{ $verify_jwt_token.error }}"

  - name: protected_response
    condition:
      left: "{{ $handle_jwt_verification }}"
      operator: exists
      right: true
    then:
      return:
        status_code: 200
        headers:
          Content-Type: "application/json"
        body:
          success: true
          message: "Access granted to protected resource"
          user: "{{ $verify_jwt_token.data }}"
          timestamp: "{{ timestamp() }}"

  - name: handle_auth_errors
    condition:
      left: "{{ $verify_auth.status_code }}"
      operator: exists
      right: true
    then:
      return: "{{ $verify_auth }}"
