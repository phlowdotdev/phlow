use crate::{setup::Config, RPC};
use futures::{future, prelude::*};
use phlow_sdk::prelude::*;
use std::net::SocketAddr;
use tarpc::{
    context,
    server::{self, incoming::Incoming, Channel},
    tokio_serde::formats::Json,
};

#[derive(Clone)]
struct RPCServer(SocketAddr);

impl RPC for RPCServer {
    async fn call(self, _: context::Context, name: Value) -> Value {
        format!("Hello, {}!", name.to_string()).to_value()
    }
}

async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}

pub async fn main(config: Config) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        let server_addr = (IpAddr::V6(Ipv6Addr::LOCALHOST), 5051);

    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    tracing::info!("Listening on port {}", listener.local_addr().port());
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = HelloServer(channel.transport().peer_addr().unwrap());
            channel.execute(server.serve()).for_each(spawn)
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}
