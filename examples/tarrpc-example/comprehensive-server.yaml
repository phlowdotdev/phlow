name: comprehensive-tarrpc-example
main: tarrpc
modules:
  - module: tarrpc
    with:
      host: localhost
      port: 8080
      service_name: comprehensive_service
      transport: tcp
      timeout: 30
      max_connections: 100
      retry_attempts: 3
      methods:
        - name: user_registration
          handler: handle_user_registration
        - name: data_processing
          handler: handle_data_processing
        - name: file_upload
          handler: handle_file_upload
        - name: notification_send
          handler: handle_notification_send
        - name: analytics_report
          handler: handle_analytics_report
          
  - module: log
    with: {}
    
  - module: postgres
    with:
      host: !phs envs.POSTGRES_HOST ?? 'localhost'
      user: !phs envs.POSTGRES_USER ?? 'postgres'
      password: !phs envs.POSTGRES_PASSWORD ?? 'postgres'
      database: !phs envs.POSTGRES_DB ?? 'phlow_db'

steps:
  - step: handle_user_registration
    description: "Handle user registration process"
    sequence:
      - use: log
        input:
          level: info
          message: !phs "User registration started: " + input.args.user_data.email
      
      - use: postgres
        input:
          sql: |
            INSERT INTO users (email, name, created_at) 
            VALUES ($1, $2, NOW())
          params:
            - !phs input.args.user_data.email
            - !phs input.args.user_data.name
      
      - use: log
        input:
          level: info
          message: !phs "User registered successfully: " + input.args.user_data.email
    
  - step: handle_data_processing
    description: "Handle data processing requests"
    sequence:
      - use: log
        input:
          level: info
          message: !phs "Processing data batch: " + input.args.batch_id
      
      - script: |
          // Simulate data processing
          const data = input.args.data;
          const processed = data.map(item => ({
            ...item,
            processed_at: new Date().toISOString(),
            status: 'processed'
          }));
          
          return {
            batch_id: input.args.batch_id,
            processed_count: processed.length,
            results: processed
          };
    
  - step: handle_file_upload
    description: "Handle file upload requests"
    sequence:
      - use: log
        input:
          level: info
          message: !phs "File upload initiated: " + input.args.filename
      
      - script: |
          // Simulate file validation and processing
          const filename = input.args.filename;
          const size = input.args.size || 0;
          
          if (size > 10 * 1024 * 1024) { // 10MB limit
            throw new Error('File size exceeds limit');
          }
          
          return {
            filename: filename,
            size: size,
            upload_id: 'upload_' + Date.now(),
            status: 'uploaded'
          };
    
  - step: handle_notification_send
    description: "Handle notification sending"
    sequence:
      - use: log
        input:
          level: info
          message: !phs "Sending notification: " + input.args.type
      
      - script: |
          // Simulate notification sending
          const notification = {
            id: 'notif_' + Date.now(),
            type: input.args.type,
            recipient: input.args.recipient,
            message: input.args.message,
            sent_at: new Date().toISOString(),
            status: 'sent'
          };
          
          return notification;
    
  - step: handle_analytics_report
    description: "Generate analytics report"
    sequence:
      - use: log
        input:
          level: info
          message: !phs "Generating analytics report: " + input.args.report_type
      
      - use: postgres
        input:
          sql: |
            SELECT 
              COUNT(*) as total_users,
              COUNT(CASE WHEN created_at >= NOW() - INTERVAL '7 days' THEN 1 END) as weekly_signups,
              COUNT(CASE WHEN created_at >= NOW() - INTERVAL '30 days' THEN 1 END) as monthly_signups
            FROM users
      
      - script: |
          // Simulate report generation
          const reportData = {
            report_id: 'report_' + Date.now(),
            type: input.args.report_type,
            generated_at: new Date().toISOString(),
            data: input.result || {},
            summary: {
              total_records: input.result?.total_users || 0,
              period: input.args.period || '30d'
            }
          };
          
          return reportData;
