[2025-08-12T22:12:49Z DEBUG phlow] Starting Phlow Runtime
[2025-08-12T22:12:49Z INFO  phlow::loader] Downloading modules...
[2025-08-12T22:12:49Z INFO  phlow::loader] Module http_server (latest) already exists at phlow_packages/http_server/module.so, skipping download
[2025-08-12T22:12:49Z INFO  phlow::loader] Module cache (latest) already exists at phlow_packages/cache/module.so, skipping download
[2025-08-12T22:12:49Z INFO  phlow::loader] All modules downloaded and extracted successfully
[2025-08-12T22:12:49Z DEBUG phlow::loader] update_info
[2025-08-12T22:12:49Z DEBUG phlow::loader] module info loaded
[2025-08-12T22:12:49Z DEBUG phlow::loader] module info loaded
[2025-08-12T22:12:49Z DEBUG phlow] Run application
[2025-08-12T22:12:49Z DEBUG phlow::runtime] Module http_server loaded with name "http_server" and version "latest"
[2025-08-12T22:12:49Z DEBUG phlow::loader] Find phlow_packages/http_server/module.so...
[2025-08-12T22:12:49Z INFO  phlow::loader] ðŸ§ª Load Module: http_server (latest), in phlow_packages/http_server/module.so
[2025-08-12T22:12:49Z INFO  phlow::loader] Loading binary module: phlow_packages/http_server/module.so
[2m2025-08-12T22:12:49.930690Z[0m [34mDEBUG[0m [2mphlow_sdk::otel[0m[2m:[0m PHLOW_OTEL is set to false, using default subscriber
[2m2025-08-12T22:12:49.933941Z[0m [34mDEBUG[0m [2mlog[0m[2m:[0m Loading OpenAPI spec from content: {"info": {"version": "1.0.0","title": "Test API"},"openapi": "3.1.0","components": {"responses": {"NotFound": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}},"description": "Resource not found"},"ValidationError": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Error"}}},"description": "Validation error"}},"parameters": {"UserIdPath": {"schema": {"$ref": "#/components/schemas/UserId"},"name": "userId","in": "path","required": true}},"schemas": {"User": {"description": "User resource","required": ["id","name","email"],"additionalProperties": false,"type": "object","properties": {"name": {"type": "string","pattern": "^[a-zA-ZÃ€-Ã¿ ]+$","maxLength": 50,"minLength": 2},"email": {"type": "string","format": "email"},"phone": {"minLength": 8,"maxLength": 20,"description": "User phone number (optional)","type": "string","pattern": "^\+?[1-9]\d[\d \-\(\)]{7,15}$"},"id": {"$ref": "#/components/schemas/UserId"},"age": {"maximum": 120,"minimum": 0,"description": "User age in years (optional)","type": "integer"}}},"Error": {"required": ["code","message"],"properties": {"details": {"items": {"type": "object"},"type": "array","description": "Arbitrary validation or domain details"},"code": {"type": "string"},"message": {"type": "string"}},"type": "object","additionalProperties": false},"NewUser": {"required": ["name","email"],"properties": {"email": {"type": "string","format": "email"},"age": {"minimum": 0,"type": "integer","maximum": 120},"phone": {"minLength": 8,"maxLength": 20,"pattern": "^\+?[1-9]\d[\d \-\(\)]{7,15}$","type": "string"},"name": {"type": "string","pattern": "^[a-zA-ZÃ€-Ã¿ ]+$","minLength": 2,"maxLength": 50}},"additionalProperties": false,"description": "Payload to create a new user","type": "object"},"UpdateUser": {"description": "Payload to update an existing user","minProperties": 1,"type": "object","additionalProperties": true,"properties": {"age": {"type": "integer","maximum": 120,"minimum": 0},"phone": {"pattern": "^\+?[1-9]\d[\d \-\(\)]{7,15}$","minLength": 8,"type": "string","maxLength": 20},"name": {"maxLength": 50,"pattern": "^[a-zA-ZÃ€-Ã¿ ]+$","minLength": 2,"type": "string"}}},"UserId": {"description": "The unique identifier of a user (email address in this implementation)","type": "string"}}},"servers": [{"url": "https://api.example.com/v1"}],"paths": {"/users/{userId}": {"get": {"operationId": "getUser","responses": {"200": {"description": "User found","content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}},"404": {"$ref": "#/components/responses/NotFound"}},"tags": ["Users"],"summary": "Get user by ID"},"parameters": [{"$ref": "#/components/parameters/UserIdPath"}],"put": {"tags": ["Users"],"summary": "Update user by ID","requestBody": {"required": true,"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateUser"}}}},"operationId": "updateUser","responses": {"404": {"$ref": "#/components/responses/NotFound"},"200": {"description": "User updated","content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}},"400": {"$ref": "#/components/responses/ValidationError"}}},"delete": {"operationId": "deleteUser","summary": "Delete user by ID","tags": ["Users"],"responses": {"204": {"description": "User deleted"},"404": {"$ref": "#/components/responses/NotFound"}}}},"/users": {"post": {"responses": {"201": {"headers": {"Location": {"description": "URI of the created resource","schema": {"format": "uri","type": "string"}}},"description": "User created","content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}},"400": {"$ref": "#/components/responses/ValidationError"}},"summary": "Create a new user","operationId": "createUser","requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/NewUser"}}},"required": true},"tags": ["Users"]},"get": {"responses": {"400": {"$ref": "#/components/responses/ValidationError"},"200": {"description": "A list of users","content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/User"},"type": "array"}}}}},"tags": ["Users"],"operationId": "listUsers","summary": "List all users"}}},"tags": [{"name": "Users","description": "User management endpoints"}]}    
[2m2025-08-12T22:12:49.935327Z[0m [32m INFO[0m [2mlog[0m[2m:[0m OpenAPI validator loaded successfully    
[2m2025-08-12T22:12:49.935375Z[0m [34mDEBUG[0m [2mlog[0m[2m:[0m Listening on 0.0.0.0:3000    
[2025-08-12T22:12:49Z DEBUG phlow::runtime] Module http_server did not register
[2025-08-12T22:12:49Z DEBUG phlow::runtime] Module cache loaded with name "cache" and version "latest"
[2025-08-12T22:12:49Z DEBUG phlow::loader] Find phlow_packages/cache/module.so...
[2025-08-12T22:12:49Z INFO  phlow::loader] ðŸ§ª Load Module: cache (latest), in phlow_packages/cache/module.so
[2025-08-12T22:12:49Z INFO  phlow::loader] Loading binary module: phlow_packages/cache/module.so
[2025-08-12T22:12:49Z DEBUG phlow::runtime] Module cache registered
[2025-08-12T22:12:49Z DEBUG cache] Cache module started with config: CacheConfig { capacity: 1000, default_ttl: None, enable_events: false }
[2025-08-12T22:12:49Z INFO  phlow::runtime] Phlow!
[2025-08-12T22:12:49Z DEBUG phlow_engine::transform] [
    	[
    		{
    			"return": {
    				"status_code": 409,
    				"body": {
    					"message": "User already exists"
    				}
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"key": "{{ main.body.email }}",
    				"action": "get"
    			},
    			"use": "cache"
    		},
    		{
    			"assert": "{{ payload.success && payload.found }}",
    			"then": 0
    		},
    		{
    			"use": "cache",
    			"input": {
    				"action": "set",
    				"value": "{{ main.body }}",
    				"key": "{{ main.body.email }}"
    			}
    		},
    		{
    			"return": {
    				"body": {
    					"message": "User created successfully",
    					"user": "{{ main.body }}"
    				},
    				"status_code": 201
    			}
    		}
    	],
    	[
    		{
    			"return": {
    				"body": "{{ main }}",
    				"status_code": 200
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"key": "{{ main.path_params.userId }}",
    				"action": "get"
    			},
    			"use": "cache"
    		},
    		{
    			"then": 2,
    			"assert": "{{ payload.success }}"
    		},
    		{
    			"return": {
    				"body": {
    					"message": "User not found"
    				},
    				"status_code": 404
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"action": "set",
    				"key": "{{ main.path_params.userId }}",
    				"value": "{{ merge(payload.value, main.body) }}"
    			},
    			"use": "cache"
    		},
    		{
    			"return": {
    				"status_code": 200,
    				"body": {
    					"user": "{{ main.body }}",
    					"message": "User updated successfully"
    				}
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"value": "{{ main.body }}",
    				"action": "get",
    				"key": "{{ main.path_params.userId }}"
    			},
    			"use": "cache"
    		},
    		{
    			"assert": "{{ payload.success && !is_empty(payload.value) }}",
    			"then": 4
    		},
    		{
    			"return": {
    				"status_code": 404,
    				"body": {
    					"message": "User not found"
    				}
    			}
    		}
    	],
    	[
    		{
    			"input": {
    				"action": "remove",
    				"key": "{{ main.path_params.userId }}"
    			},
    			"use": "cache"
    		},
    		{
    			"return": {
    				"body": {
    				},
    				"status_code": 204
    			}
    		}
    	],
    	[
    		{
    			"use": "cache",
    			"input": {
    				"action": "list"
    			}
    		},
    		{
    			"return": {
    				"body": {
    					"users": "{{ payload.items }}"
    				},
    				"status_code": 200
    			}
    		}
    	],
    	[
    		{
    			"assert": "{{ main.method == \"POST\" && main.path == \"/users\" }}",
    			"then": 1
    		},
    		{
    			"assert": "{{ main.method == \"GET\" && main.path == \"/users/{userId}\" }}",
    			"then": 3
    		},
    		{
    			"assert": "{{ main.method == \"PUT\" && main.path == \"/users/{userId}\" }}",
    			"then": 5
    		},
    		{
    			"assert": "{{ main.method == \"DELETE\" && main.path == \"/users/{userId}\" }}",
    			"then": 6
    		},
    		{
    			"assert": "{{ main.method == \"GET\" && main.path == \"/users\" }}",
    			"then": 7
    		}
    	]
    ]
[2025-08-12T22:12:51Z DEBUG cache] Cache module received input: Get { key: "joao@exemplo.com" }
[2025-08-12T22:12:51Z DEBUG cache] Cache miss for key 'joao@exemplo.com'
[2025-08-12T22:12:51Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:51Z DEBUG cache] Cache module received input: Set { key: "joao@exemplo.com", value: Object(HashMap({String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(30), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "JoÃ£o Silva" }), String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" })})), ttl: None }
[2025-08-12T22:12:51Z DEBUG cache] Set key 'joao@exemplo.com' with value: Object(HashMap({String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(30), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "JoÃ£o Silva" }), String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" })}))
[2025-08-12T22:12:51Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:51Z DEBUG cache] Cache module received input: Get { key: "maria@exemplo.com" }
[2025-08-12T22:12:51Z DEBUG cache] Cache miss for key 'maria@exemplo.com'
[2025-08-12T22:12:51Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:51Z DEBUG cache] Cache module received input: Set { key: "maria@exemplo.com", value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "maria@exemplo.com" }), String(StringB { value: "name" }): String(StringB { value: "Maria Santos" })})), ttl: None }
[2025-08-12T22:12:51Z DEBUG cache] Set key 'maria@exemplo.com' with value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "maria@exemplo.com" }), String(StringB { value: "name" }): String(StringB { value: "Maria Santos" })}))
[2025-08-12T22:12:51Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:55Z DEBUG cache] Cache module received input: Get { key: "teste1@exemplo.com" }
[2025-08-12T22:12:55Z DEBUG cache] Cache miss for key 'teste1@exemplo.com'
[2025-08-12T22:12:55Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:55Z DEBUG cache] Cache module received input: Set { key: "teste1@exemplo.com", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "JoÃ£o Silva" }), String(StringB { value: "email" }): String(StringB { value: "teste1@exemplo.com" })})), ttl: None }
[2025-08-12T22:12:55Z DEBUG cache] Set key 'teste1@exemplo.com' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "JoÃ£o Silva" }), String(StringB { value: "email" }): String(StringB { value: "teste1@exemplo.com" })}))
[2025-08-12T22:12:55Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:56Z DEBUG cache] Cache module received input: Get { key: "usuario@dominio.com" }
[2025-08-12T22:12:56Z DEBUG cache] Cache miss for key 'usuario@dominio.com'
[2025-08-12T22:12:56Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:56Z DEBUG cache] Cache module received input: Set { key: "usuario@dominio.com", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "email" }): String(StringB { value: "usuario@dominio.com" })})), ttl: None }
[2025-08-12T22:12:56Z DEBUG cache] Set key 'usuario@dominio.com' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "email" }): String(StringB { value: "usuario@dominio.com" })}))
[2025-08-12T22:12:56Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:56Z DEBUG cache] Cache module received input: Get { key: "usuario@sub.dominio.com.br" }
[2025-08-12T22:12:56Z DEBUG cache] Cache miss for key 'usuario@sub.dominio.com.br'
[2025-08-12T22:12:56Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:56Z DEBUG cache] Cache module received input: Set { key: "usuario@sub.dominio.com.br", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "email" }): String(StringB { value: "usuario@sub.dominio.com.br" })})), ttl: None }
[2025-08-12T22:12:56Z DEBUG cache] Set key 'usuario@sub.dominio.com.br' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "email" }): String(StringB { value: "usuario@sub.dominio.com.br" })}))
[2025-08-12T22:12:56Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:58Z DEBUG cache] Cache module received input: Get { key: "idade4@exemplo.com" }
[2025-08-12T22:12:58Z DEBUG cache] Cache miss for key 'idade4@exemplo.com'
[2025-08-12T22:12:58Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:58Z DEBUG cache] Cache module received input: Set { key: "idade4@exemplo.com", value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "idade4@exemplo.com" }), String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(25), i128: None, f32: None, f64: None })})), ttl: None }
[2025-08-12T22:12:58Z DEBUG cache] Set key 'idade4@exemplo.com' with value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "idade4@exemplo.com" }), String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(25), i128: None, f32: None, f64: None })}))
[2025-08-12T22:12:58Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:59Z DEBUG cache] Cache module received input: List { filter_type: "none", filter_value: None, filter_prefix: None, filter_suffix: None, order: "asc", limit: None, offset: 0 }
[2025-08-12T22:12:59Z DEBUG cache] Listed 6 items (total: 6, offset: 0, limit: None)
[2025-08-12T22:12:59Z DEBUG cache] Cache operation successful
[2025-08-12T22:12:59Z DEBUG cache] Cache module received input: Get { key: "joao@exemplo.com" }
[2025-08-12T22:12:59Z DEBUG cache] Cache hit for key 'joao@exemplo.com'
[2025-08-12T22:12:59Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:00Z DEBUG cache] Cache module received input: Get { key: "usuario-inexistente" }
[2025-08-12T22:13:00Z DEBUG cache] Cache miss for key 'usuario-inexistente'
[2025-08-12T22:13:00Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:00Z DEBUG cache] Cache module received input: Get { key: "123" }
[2025-08-12T22:13:00Z DEBUG cache] Cache miss for key '123'
[2025-08-12T22:13:00Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:00Z DEBUG cache] Cache module received input: Get { key: "joao@exemplo.com" }
[2025-08-12T22:13:00Z DEBUG cache] Cache hit for key 'joao@exemplo.com'
[2025-08-12T22:13:00Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:00Z DEBUG cache] Cache module received input: Set { key: "joao@exemplo.com", value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(31), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "JoÃ£o Silva Atualizado" })})), ttl: None }
[2025-08-12T22:13:00Z DEBUG cache] Set key 'joao@exemplo.com' with value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(31), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "JoÃ£o Silva Atualizado" })}))
[2025-08-12T22:13:00Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:01Z DEBUG cache] Cache module received input: Get { key: "joao@exemplo.com" }
[2025-08-12T22:13:01Z DEBUG cache] Cache hit for key 'joao@exemplo.com'
[2025-08-12T22:13:01Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:01Z DEBUG cache] Cache module received input: Set { key: "joao@exemplo.com", value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(31), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "Novo Nome" })})), ttl: None }
[2025-08-12T22:13:01Z DEBUG cache] Set key 'joao@exemplo.com' with value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(31), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "Novo Nome" })}))
[2025-08-12T22:13:01Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:01Z DEBUG cache] Cache module received input: Get { key: "joao@exemplo.com" }
[2025-08-12T22:13:01Z DEBUG cache] Cache hit for key 'joao@exemplo.com'
[2025-08-12T22:13:01Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:01Z DEBUG cache] Cache module received input: Set { key: "joao@exemplo.com", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Novo Nome" }), String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(32), i128: None, f32: None, f64: None })})), ttl: None }
[2025-08-12T22:13:01Z DEBUG cache] Set key 'joao@exemplo.com' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Novo Nome" }), String(StringB { value: "email" }): String(StringB { value: "joao@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(32), i128: None, f32: None, f64: None })}))
[2025-08-12T22:13:01Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:01Z DEBUG cache] Cache module received input: Get { key: "usuario-inexistente" }
[2025-08-12T22:13:01Z DEBUG cache] Cache miss for key 'usuario-inexistente'
[2025-08-12T22:13:01Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:02Z DEBUG cache] Cache module received input: Remove { key: "maria@exemplo.com" }
[2025-08-12T22:13:02Z DEBUG cache] Removed key 'maria@exemplo.com'
[2025-08-12T22:13:02Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:02Z DEBUG cache] Cache module received input: Remove { key: "usuario-inexistente" }
[2025-08-12T22:13:02Z DEBUG cache] Key 'usuario-inexistente' not found for removal
[2025-08-12T22:13:02Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:02Z DEBUG cache] Cache module received input: Remove { key: "abc123" }
[2025-08-12T22:13:02Z DEBUG cache] Key 'abc123' not found for removal
[2025-08-12T22:13:02Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:09Z DEBUG cache] Cache module received input: Get { key: "teste@exemplo.com" }
[2025-08-12T22:13:09Z DEBUG cache] Cache miss for key 'teste@exemplo.com'
[2025-08-12T22:13:09Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:09Z DEBUG cache] Cache module received input: Set { key: "teste@exemplo.com", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "email" }): String(StringB { value: "teste@exemplo.com" })})), ttl: None }
[2025-08-12T22:13:09Z DEBUG cache] Set key 'teste@exemplo.com' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "Teste" }), String(StringB { value: "email" }): String(StringB { value: "teste@exemplo.com" })}))
[2025-08-12T22:13:09Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:10Z DEBUG cache] Cache module received input: Get { key: "teste@exemplo.com" }
[2025-08-12T22:13:10Z DEBUG cache] Cache hit for key 'teste@exemplo.com'
[2025-08-12T22:13:10Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:11Z DEBUG cache] Cache module received input: Get { key: "baby@exemplo.com" }
[2025-08-12T22:13:11Z DEBUG cache] Cache miss for key 'baby@exemplo.com'
[2025-08-12T22:13:11Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:11Z DEBUG cache] Cache module received input: Set { key: "baby@exemplo.com", value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "baby@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(0), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "Baby" })})), ttl: None }
[2025-08-12T22:13:11Z DEBUG cache] Set key 'baby@exemplo.com' with value: Object(HashMap({String(StringB { value: "email" }): String(StringB { value: "baby@exemplo.com" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(0), i128: None, f32: None, f64: None }), String(StringB { value: "name" }): String(StringB { value: "Baby" })}))
[2025-08-12T22:13:11Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:11Z DEBUG cache] Cache module received input: Get { key: "old@exemplo.com" }
[2025-08-12T22:13:11Z DEBUG cache] Cache miss for key 'old@exemplo.com'
[2025-08-12T22:13:11Z DEBUG cache] Cache operation successful
[2025-08-12T22:13:11Z DEBUG cache] Cache module received input: Set { key: "old@exemplo.com", value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "CentenÃ¡rio" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(120), i128: None, f32: None, f64: None }), String(StringB { value: "email" }): String(StringB { value: "old@exemplo.com" })})), ttl: None }
[2025-08-12T22:13:11Z DEBUG cache] Set key 'old@exemplo.com' with value: Object(HashMap({String(StringB { value: "name" }): String(StringB { value: "CentenÃ¡rio" }), String(StringB { value: "age" }): Number(Number { u8: None, u16: None, u32: None, u64: None, u128: None, i8: None, i16: None, i32: None, i64: Some(120), i128: None, f32: None, f64: None }), String(StringB { value: "email" }): String(StringB { value: "old@exemplo.com" })}))
[2025-08-12T22:13:11Z DEBUG cache] Cache operation successful
