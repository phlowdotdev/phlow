"use strict";(self.webpackChunkphlow_docs=self.webpackChunkphlow_docs||[]).push([[4389],{4833:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"environment","title":"Environment Variables","description":"Below is a list of all environment variables used by the application, combining those defined in both files, along with their descriptions, default values, and types.","source":"@site/docs/environment.md","sourceDirName":".","slug":"/environment","permalink":"/docs/environment","draft":false,"unlisted":false,"editUrl":"https://github.com/phlowdotdev/phlow/tree/main/site/docs/environment.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9,"title":"Environment Variables"},"sidebar":"docsSidebar","previous":{"title":"Running Remote Projects","permalink":"/docs/remote-projects"},"next":{"title":"Examples","permalink":"/docs/examples"}}');var s=i(4848),r=i(8453);const l={sidebar_position:9,title:"Environment Variables"},d="Environment Settings",o={},c=[{value:"Environment Variables Table",id:"environment-variables-table",level:2},{value:"Additional Notes",id:"additional-notes",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"environment-settings",children:"Environment Settings"})}),"\n",(0,s.jsx)(n.p,{children:"Below is a list of all environment variables used by the application, combining those defined in both files, along with their descriptions, default values, and types."}),"\n",(0,s.jsx)(n.h2,{id:"environment-variables-table",children:"Environment Variables Table"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Variable"}),(0,s.jsx)(n.th,{children:"Description  Default Value"}),(0,s.jsx)(n.th,{children:"Type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PHLOW_PACKAGE_CONSUMERS_COUNT"}),(0,s.jsx)(n.td,{children:"Number of package consumers Defines how many threads will be used to process packages."}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"10"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PHLOW_MIN_ALLOCATED_MEMORY_MB"}),(0,s.jsx)(n.td,{children:"Minimum allocated memory (MB) Defines the minimum amount of memory, in MB, allocated to the process."}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"10"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PHLOW_GARBAGE_COLLECTION_ENABLED"}),(0,s.jsx)(n.td,{children:"Enable garbage collection Enables or disables garbage collection (GC)."}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PHLOW_GARBAGE_COLLECTION_INTERVAL_SECONDS"}),(0,s.jsx)(n.td,{children:"Garbage collection interval (seconds) Defines the interval at which garbage collection will be performed."}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"60"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PHLOW_LOG"}),(0,s.jsxs)(n.td,{children:["Log level Defines the log verbosity for standard logging output. Possible values typically include ",(0,s.jsx)(n.code,{children:"TRACE"}),", ",(0,s.jsx)(n.code,{children:"DEBUG"}),", ",(0,s.jsx)(n.code,{children:"INFO"}),", ",(0,s.jsx)(n.code,{children:"WARN"}),", ",(0,s.jsx)(n.code,{children:"ERROR"}),"."]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"WARN"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PHLOW_SPAN"}),(0,s.jsxs)(n.td,{children:["Span level Defines the verbosity level for span (OpenTelemetry) tracing. Possible values typically include ",(0,s.jsx)(n.code,{children:"TRACE"}),", ",(0,s.jsx)(n.code,{children:"DEBUG"}),", ",(0,s.jsx)(n.code,{children:"INFO"}),", ",(0,s.jsx)(n.code,{children:"WARN"}),", ",(0,s.jsx)(n.code,{children:"ERROR"}),"."]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INFO"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PHLOW_OTEL"}),(0,s.jsx)(n.td,{children:"Enable OpenTelemetry Enables or disables OpenTelemetry tracing and metrics."}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"true"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"additional-notes",children:"Additional Notes"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The default values are provided for each variable, and they can be overridden by setting the corresponding environment variable."}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"PHLOW_PACKAGE_CONSUMERS_COUNT"})," variable controls the number of threads used for processing packages, which can be adjusted based on the workload."]}),"\n",(0,s.jsx)(n.li,{children:"If an environment variable is not set, the default value indicated in the table above will be used."}),"\n",(0,s.jsx)(n.li,{children:"Set the corresponding environment variables before running the application to override the defaults."}),"\n",(0,s.jsxs)(n.li,{children:["The log level (",(0,s.jsx)(n.code,{children:"PHLOW_LOG"}),") and span level (",(0,s.jsx)(n.code,{children:"PHLOW_SPAN"}),") control different layers of logging:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PHLOW_LOG"}),": Affects standard logging (e.g., error, warning, info messages)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PHLOW_SPAN"}),": Affects tracing spans (useful for deeper telemetry insights with OpenTelemetry)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"PHLOW_OTEL"})," variable controls whether or not OpenTelemetry providers (for both tracing and metrics) are initialized."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var t=i(6540);const s={},r=t.createContext(s);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);