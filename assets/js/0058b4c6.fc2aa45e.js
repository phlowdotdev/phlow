"use strict";(self.webpackChunkphlow_docs=self.webpackChunkphlow_docs||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"link","label":"Intro","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Philosophy","href":"/docs/philosophy","docId":"philosophy","unlisted":false},{"type":"link","label":"Install","href":"/docs/install","docId":"install","unlisted":false},{"type":"link","label":"Running","href":"/docs/running","docId":"running","unlisted":false},{"type":"category","label":"First Steps","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"HTTP - Mirror Request","href":"/docs/first-steps/http-main","docId":"first-steps/http-main","unlisted":false},{"type":"link","label":"CLI - Are you a student?","href":"/docs/first-steps/cli-assert","docId":"first-steps/cli-assert","unlisted":false}],"href":"/docs/category/first-steps"},{"type":"category","label":"Phlow Structure","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/phlow-structure/introduction","docId":"phlow-structure/introduction","unlisted":false},{"type":"link","label":"Main Flow Structure (main.yaml)","href":"/docs/phlow-structure/main","docId":"phlow-structure/main","unlisted":false},{"type":"link","label":"Modules (modules.yaml)","href":"/docs/phlow-structure/modules","docId":"phlow-structure/modules","unlisted":false},{"type":"link","label":"Steps","href":"/docs/phlow-structure/steps","docId":"phlow-structure/steps","unlisted":false},{"type":"link","label":"Special Directives","href":"/docs/phlow-structure/directives","docId":"phlow-structure/directives","unlisted":false},{"type":"link","label":"Phlow Scripts (.phs)","href":"/docs/phlow-structure/scripts","docId":"phlow-structure/scripts","unlisted":false}],"href":"/docs/category/phlow-structure"},{"type":"category","label":"Packages and Modules","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/packages-and-modules/introduction","docId":"packages-and-modules/introduction","unlisted":false},{"type":"link","label":"Module Types","href":"/docs/packages-and-modules/module-type","docId":"packages-and-modules/module-type","unlisted":false},{"type":"link","label":"Creating Your Own Module","href":"/docs/packages-and-modules/create-module","docId":"packages-and-modules/create-module","unlisted":false}],"href":"/docs/category/packages-and-modules"},{"type":"link","label":"OpenTelemetry","href":"/docs/opentelemetry","docId":"opentelemetry","unlisted":false},{"type":"link","label":"Running Remote Projects","href":"/docs/remote-projects","docId":"remote-projects","unlisted":false},{"type":"link","label":"Environment Variables","href":"/docs/environment","docId":"environment","unlisted":false},{"type":"link","label":"Examples","href":"/docs/examples","docId":"examples","unlisted":false},{"type":"link","label":"Uninstall","href":"/docs/uninstall","docId":"uninstall","unlisted":false}]},"docs":{"environment":{"id":"environment","title":"Environment Variables","description":"Below is a list of all environment variables used by the application, combining those defined in both files, along with their descriptions, default values, and types.","sidebar":"docsSidebar"},"examples":{"id":"examples","title":"Examples","description":"You can find usage examples of Phlow in our official GitHub repository.","sidebar":"docsSidebar"},"first-steps/cli-assert":{"id":"first-steps/cli-assert","title":"CLI - Are you a student?","description":"This is a simple example of a Phlow that uses the cli module to ask the user if they are a student. It uses the assert step to check the user\'s input and return different messages based on their response.","sidebar":"docsSidebar"},"first-steps/http-main":{"id":"first-steps/http-main","title":"HTTP - Mirror Request","description":"This is a simple example of a Phlow that mirrors a request to Phlow. It uses the http_server module to handle incoming HTTP requests and returns the request body as a JSON response.","sidebar":"docsSidebar"},"install":{"id":"install","title":"Install","description":"You can easily install or uninstall Phlow using our ready-to-use shell scripts.","sidebar":"docsSidebar"},"intro":{"id":"intro","title":"Intro","description":"Modular Flow Runtime for Composable Backends","sidebar":"docsSidebar"},"opentelemetry":{"id":"opentelemetry","title":"OpenTelemetry","description":"Phlow provides built-in support for OpenTelemetry to enable observability and monitoring of your workflows. This includes tracing, metrics, and logging capabilities.","sidebar":"docsSidebar"},"packages-and-modules/create-module":{"id":"packages-and-modules/create-module","title":"Creating Your Own Module","description":"Phlow modules are written in Rust and compiled as shared libraries. Here\u2019s a real example of a simple log module that prints messages at various log levels.","sidebar":"docsSidebar"},"packages-and-modules/introduction":{"id":"packages-and-modules/introduction","title":"Introduction","description":"Phlow has a powerful package management system that allows you to import and use third-party modules in your workflows. This makes it easier to reuse code and integrate with external libraries.","sidebar":"docsSidebar"},"packages-and-modules/module-type":{"id":"packages-and-modules/module-type","title":"Module Types","description":"Phlow provides two types of modules: main and step.","sidebar":"docsSidebar"},"philosophy":{"id":"philosophy","title":"Philosophy","description":"1. Radical Modularity","sidebar":"docsSidebar"},"phlow-structure/directives":{"id":"phlow-structure/directives","title":"Special Directives","description":"Phlow introduces special YAML directives that enable advanced functionality for data manipulation and scripting. Below are the available directives, explained with detailed examples.","sidebar":"docsSidebar"},"phlow-structure/introduction":{"id":"phlow-structure/introduction","title":"Introduction","description":"Phlow is a modular runtime for building backends, automations, and orchestrations using YAML to define flows. Each flow is descriptive and structured into modules, steps, and scripts.","sidebar":"docsSidebar"},"phlow-structure/main":{"id":"phlow-structure/main","title":"Main Flow Structure (main.yaml)","description":"The main.yaml file defines the flow\'s metadata and execution logic. By default, main.yaml is the primary file executed in Phlow, serving as the entry point for defining workflows and their associated configurations.","sidebar":"docsSidebar"},"phlow-structure/modules":{"id":"phlow-structure/modules","title":"Modules (modules.yaml)","description":"Modules define components or services needed by the flow.","sidebar":"docsSidebar"},"phlow-structure/scripts":{"id":"phlow-structure/scripts","title":"Phlow Scripts (.phs)","description":"Phlow Scripts (PHS) is a lightweight scripting format for Phlow, built on top of Rhai. It enables simple, dynamic behavior scripting using .phs files while deeply integrating with the Phlow runtime and module system.","sidebar":"docsSidebar"},"phlow-structure/steps":{"id":"phlow-structure/steps","title":"Steps","description":"Steps control the logic and flow of execution.","sidebar":"docsSidebar"},"remote-projects":{"id":"remote-projects","title":"Running Remote Projects","description":"Phlow supports running remote projects directly from URLs or Git repositories. You can pass a .git, .zip, or .tar.gz source \u2014 Phlow will automatically download, extract (if needed), and execute the flow from a main.yaml.","sidebar":"docsSidebar"},"running":{"id":"running","title":"Running","description":"By default, Phlow will look for a \\\\main.yaml\\\\ in the current directory:","sidebar":"docsSidebar"},"uninstall":{"id":"uninstall","title":"Uninstall","description":"\ud83e\uddf9 Uninstall via curl","sidebar":"docsSidebar"}}}}')}}]);