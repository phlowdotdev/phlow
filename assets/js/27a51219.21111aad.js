"use strict";(self.webpackChunkphlow_docs=self.webpackChunkphlow_docs||[]).push([[7927],{6371:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>n,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"phlow-structure/scripts","title":"Phlow Scripts (.phs)","description":"Phlow Scripts (PHS) is a lightweight scripting format for Phlow, built on top of Rhai. It enables simple, dynamic behavior scripting using .phs files while deeply integrating with the Phlow runtime and module system.","source":"@site/docs/phlow-structure/scripts.md","sourceDirName":"phlow-structure","slug":"/phlow-structure/scripts","permalink":"/docs/phlow-structure/scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/phlowdotdev/phlow/tree/main/site/docs/phlow-structure/scripts.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Phlow Scripts (.phs)"},"sidebar":"docsSidebar","previous":{"title":"Special Directives","permalink":"/docs/phlow-structure/directives"},"next":{"title":"Packages and Modules","permalink":"/docs/category/packages-and-modules"}}');var o=i(4848),r=i(8453);const n={sidebar_position:6,title:"Phlow Scripts (.phs)"},c=void 0,l={},h=[{value:"\u2728 Overview",id:"-overview",level:2},{value:"\ud83d\udcda Learn More",id:"-learn-more",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Phlow Scripts (PHS)"})," is a lightweight scripting format for ",(0,o.jsx)(t.a,{href:"https://github.com/phlowdotdev/phlow",children:"Phlow"}),", built on top of ",(0,o.jsx)(t.a,{href:"https://rhai.rs/",children:"Rhai"}),". It enables simple, dynamic behavior scripting using ",(0,o.jsx)(t.code,{children:".phs"})," files while deeply integrating with the Phlow runtime and module system."]}),"\n",(0,o.jsx)(t.h2,{id:"-overview",children:"\u2728 Overview"}),"\n",(0,o.jsx)(t.p,{children:"PHS (Phlow Script) brings the power of embedded scripting to YAML-based workflows. It's designed to let you inject dynamic logic through readable scripts, while preserving Phlow's declarative style."}),"\n",(0,o.jsxs)(t.p,{children:["You can inject modules directly into your PHS context via the ",(0,o.jsx)(t.code,{children:"modules"})," section of your ",(0,o.jsx)(t.code,{children:".yaml"})," configuration. Each module declared becomes globally accessible in the ",(0,o.jsx)(t.code,{children:".phs"})," script, making it easy to mix scripting with orchestrated steps."]}),"\n",(0,o.jsx)(t.h2,{id:"-learn-more",children:"\ud83d\udcda Learn More"}),"\n",(0,o.jsxs)(t.p,{children:["For a comprehensive guide on Phlow Scripts, visit the ",(0,o.jsx)(t.a,{href:"https://github.com/phlowdotdev/phlow/tree/main/phs#readme",children:"official documentation"}),"."]})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>n,x:()=>c});var s=i(6540);const o={},r=s.createContext(o);function n(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);