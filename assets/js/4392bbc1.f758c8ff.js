"use strict";(self.webpackChunkphlow_docs=self.webpackChunkphlow_docs||[]).push([[2833],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},9354:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"first-steps/cli-assert","title":"CLI - Are you a student?","description":"This is a simple example of a Phlow that uses the cli module to ask the user if they are a student. It uses the assert step to check the user\'s input and return different messages based on their response.","source":"@site/docs/first-steps/cli-assert.md","sourceDirName":"first-steps","slug":"/first-steps/cli-assert","permalink":"/docs/first-steps/cli-assert","draft":false,"unlisted":false,"editUrl":"https://github.com/phlowdotdev/phlow/tree/main/site/docs/first-steps/cli-assert.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"CLI - Are you a student?"},"sidebar":"docsSidebar","previous":{"title":"HTTP - Mirror Request","permalink":"/docs/first-steps/http-main"},"next":{"title":"Phlow Structure","permalink":"/docs/category/phlow-structure"}}');var a=s(4848),i=s(8453);const r={sidebar_position:2,title:"CLI - Are you a student?"},o=void 0,l={},h=[{value:"Run the Phlow",id:"run-the-phlow",level:3},{value:"Test",id:"test",level:3},{value:"Expected Output",id:"expected-output",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Notes",id:"notes",level:3}];function c(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["This is a simple example of a Phlow that uses the ",(0,a.jsx)(n.code,{children:"cli"})," module to ask the user if they are a student. It uses the ",(0,a.jsx)(n.code,{children:"assert"})," step to check the user's input and return different messages based on their response."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"main: cli\nname: Are you a student?\nversion: 1.0.0\ndescription: Check if you are a student.\nauthor: Your Name\nmodules: \n  - module: cli\n    version: latest\n    with:\n      additional_args: false\n      args: \n        - name: name\n          description: Student name\n          index: 1\n          type: string\n          required: true\n        - name: age\n          description: Student age\n          index: 2\n          type: number\n          required: true\n        - name: force\n          long: force\n          description: Force assertion\n          short: f\n          type: boolean\n          default: false\nsteps:\n  - assert: !phs main.force\n    then:\n      return: !phs `${main.name} is a student, but the age is not valid`\n    else:\n      - assert: !phs main.age < 18 && main.age > 3\n        then:\n          return: !phs `${main.name} is a student`\n      - assert: !phs main.age >= 18\n        then:\n          return: !phs `${main.name} is not a student`\n      - assert: !phs main.age <= 3\n        then:\n          return: !phs `${main.name} is a baby`  \n      - return: !phs `${main.name} is not a valid age`\n"})}),"\n",(0,a.jsx)(n.h3,{id:"run-the-phlow",children:"Run the Phlow"}),"\n",(0,a.jsxs)(n.p,{children:["You can run the Phlow using the command line. By default, Phlow will look for a ",(0,a.jsx)(n.code,{children:"main.yaml"})," in the current directory:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"phlow main.yaml\n"})}),"\n",(0,a.jsx)(n.h3,{id:"test",children:"Test"}),"\n",(0,a.jsx)(n.p,{children:"You can test the Phlow by running the command with different arguments. For example, to check if you are a student, you can run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"phlow main.yaml John 20\n"})}),"\n",(0,a.jsx)(n.p,{children:"This command will output:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"John is not a student\n"})}),"\n",(0,a.jsx)(n.h3,{id:"expected-output",children:"Expected Output"}),"\n",(0,a.jsx)(n.p,{children:"When you run the command, the Phlow will check the age and return the appropriate message. For example, if you run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"phlow main.yaml John 20\n"})}),"\n",(0,a.jsx)(n.p,{children:"The output will be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"John is not a student\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"phlow main.yaml John 15\n"})}),"\n",(0,a.jsx)(n.p,{children:"The output will be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"John is a student\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"phlow main.yaml John 2\n"})}),"\n",(0,a.jsx)(n.p,{children:"The output will be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"John is a baby\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"phlow main.yaml John 25 --force\n"})}),"\n",(0,a.jsx)(n.p,{children:"The output will be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"John is a student, but the age is not valid\n"})}),"\n",(0,a.jsx)(n.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsxs)(n.p,{children:["This example demonstrates how to use the ",(0,a.jsx)(n.code,{children:"cli"})," module in Phlow to create a simple command-line application that checks if a user is a student based on their age. You can customize the Phlow further by adding more steps or modifying the existing ones."]}),"\n",(0,a.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"assert"})," step is used to check conditions and return different messages based on the user's input."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"then"})," and ",(0,a.jsx)(n.code,{children:"else"})," clauses are used to define the actions to take based on the assertions."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"return"})," step is used to return the final message based on the assertions."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);